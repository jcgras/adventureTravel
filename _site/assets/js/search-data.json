{
  
  "0": {
    "title": "Home",
    "content": "Adventure Travel - React Native App . Version: 1.1.2, Updated: 05/23/2021 . With Adventure Travel App we aim to offer more than just a set of components and styles. We have carefully created a project where we provide a simple framework for a wide range of React Native projects, allowing you to easily adapt, reuse and create mobile app components. . For this project we have been inspired by an adventure travel agency, however, we intend that it can also serve as a basis for any kind of business. If you had a web page for your business, Adventure Travel supports you to convert/extend your current websites to mobile app efficiently. . What do we support in general? . iOS and Android platforms | React Native with Hooks approach | ECMAScript/JavaScript code standardization, format and validation | Redux | Backend integration with Firebase | Realtime Database (Store and sync remote data) | Cloud Firestore (Store remote data) | Firebase Authentication | Locations searching | Google Maps integration | Flexible variable uses via config file | Push Notifications | Biometric Authentication | Apple Sign-In | . ..and also: . Easy customization for your brand | Instant Search | Search history | Information synchronized across devices | User Profile | Walkthrough animation | Header animation | Easy to change colors and styles | Regular feature update | . . Reference links . Purchase or more info | Adventure Travel | . Documentation | https://docs.svalbard.dev | . iOS demo | https://apps.apple.com/us/app/adventure-travel-project/id1521392632 | . Android demo | https://play.google.com/store/apps/details?id=com.adventuretravelapp | . Issues | https://github.com/svalbard-app/adventureTravel/issues | . Changelog | https://github.com/svalbard-app/adventureTravel#changelog | . Contact | app@svalbard.dev | . . Continue reading the next session to get started. .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"1": {
    "title": "Extra: Migrating to your own brand",
    "content": "Migrating to your own brand . You already have a React Native project such as Adventure Travel but need to move forward with your own project/brand. Great! Continue with this guide to successfully migrate without old dependencies, update elements such as your app name, id, icons or splash screen. . . . . Updating files, folders and namespaces | Setting up a name for your App Android | iOS | | Backend configuration | Application settings | Native Vector Icons Android | iOS | | Creating an icon for your App iOS | Android | | Including a Splash Screen Add splash screen to iOS | Add splash screen to Android | | Running the app 🚀 iOS | Android | | . Updating files, folders and namespaces . Each React Native project contains a generated android and ios folders with the respective mobile application projects for each platform. Both projects include files, folders and namespaces referring to the original project, in this case: adventureTravelApp. . 📂 __test__ 📂 android ┣ 📂 app ┃ 📂 gradle - ┃ ┣ 🧱 adventureTravelApp.iml ┃ ┣ 🧱 build.gradle ┃ ┣ 🧱 gradle.properties ┃ ┣ 🧱 gradlew ┃ ┣ 🧱 gradlew.bat ┃ ┣ 🧱 local.properties ┃ ┗ 🧱 settings.gradle 📁 assets 📁 ios - ┣ 📁 adventureTravelApp - ┣ 📁 adventureTravelApp-tvOS - ┣ 📁 adventureTravelApp-tvOSTest - ┣ 📁 adventureTravelApp.xcodeproj - ┣ 📁 adventureTravelApp.xcworkspace - ┣ 📁 adventureTravelAppTest ┣ 📁 Fonts . You could change the App Display Name, the Bundle Identifier or any other parameter, but your project will still contain the same files, folders and namespaces as the original project. If you can survive with that continue to the next session Setting up a name for your App. Otherwise continue to update the whole project with your brand. . The most convenient way to update any file, folder or namespace of your project is by creating a new React Native project from scratch and then copying the source code of the original project. To do this, open the terminal and run the following command specifying your brand name: . npx react-native init YourSuperBrand . Then copy the /src folder from the original project to the newly created project. Also copy/replace these files from the original project: . .env | .env.production | App.js | babel.config.js | package.json | react-native.config.js | . Your project should be structured like this: . . . Setting up a name for your App . Let’s start by renaming the project package name and version with the name of your project from the package.json file: . package.json . { &quot;name&quot;: &quot;your-super-brand&quot;, &quot;version&quot;: &quot;1.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: { ... . Android . For Android environment you can set the applicationId and versionName from the /android/app/build.gradle file. . ... defaultConfig { applicationId &quot;com.yoursuperbrand&quot; minSdkVersion rootProject.ext.minSdkVersion targetSdkVersion rootProject.ext.targetSdkVersion versionCode 1 versionName &quot;1.0&quot; } ... . You can change the Display Name of your Android App from the /android/app/src/main/res/values/strings.xml file. . &lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;YourSuperBrand&lt;/string&gt; &lt;/resources&gt; . iOS . To change the App name for iOS platform open the project in Xcode from the project file: /ios/YourSuperBrand.xcworkspace*. In Xcode select your project and specify a nice Bundle Identifier, a Display Name and the initial Version. . *Starting React Native 0.60, the iOS project uses cocoapods, so you have to open YourSuperBrand.xcworkspace and not YourSuperBrand.xcodeproj. . . . Backend configuration . Below you can find a summary to configure the backend of your App in Firebase, but if you want to go deeper into this topic check the Backend Configuration for more details. . In this project we are using Firebase as backend solution to handle the user authentication, databases, realtime updates (Realtime database) and push notifications. Therefore it’s required to configure the whole environment from Firebase Console. So let’s start by creating a new project from Firebase Console, when the creating process completes, you’ll be taken to the overview page for your Firebase project. Then you must add your iOS/Android application using the actions in each case. . . In the registration wizard you must fill out the iOS bundle ID (iOS) or Android package name (Android) of the application, which you should have already created when you Setting up a name for your App. . To finish download the generated configuration file and include it into the project from Xcode (for iOS) or add it to the project inside the /android/app/ directory if you are creating an Android project as well. This file contains all the information to link your app with the created project, allowing you to access any of the Firebase services. . . Warning: For iOS this file may be generated with .xml extension instead of .plist, however the project will not recognize this extension so it’s very important to change it to .plist after you download it. . . . After that you just have to continue until the end of the wizard to finish with the app registration. Now that you have the firebase configuration file incorporated, you must continue to activate from Firebase Console all the required services: . Firebase Autentication | Firebase Realtime Database | Cloud Firestore | . Application settings . To complete the Firebase configuration it’s necessary to add some settings in the App source code. If you are generating for iOS open the file /ios/YourSuperBrand/AppDelegate.m and add these lines: . /ios/YourSuperBrand/AppDelegate.m . #import &quot;AppDelegate.h&quot; #import &lt;React/RCTBridge.h&gt; #import &lt;React/RCTBundleURLProvider.h&gt; #import &lt;React/RCTRootView.h&gt; + #import &lt;Firebase.h&gt; ··· @implementation AppDelegate - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { + if ([FIRApp defaultApp] == nil) { + [FIRApp configure]; + } #ifdef FB_SONARKIT_ENABLED InitializeFlipper(application); #endif ··· . For Android it’s necesary to include a dependency, therefore you must add these lines in both build.gradle files: . /android/build.gradle . buildscript { ... dependencies { classpath(&#39;com.android.tools.build:gradle:4.1.1&#39;) + classpath(&#39;com.google.gms:google-services:4.3.4&#39;) ... } } . /android/app/build.gradle . apply plugin: &quot;com.android.application&quot; + apply plugin: &quot;com.google.gms.google-services&quot; . . Warning: If you plan to include Google API to your project for searches and maps, you should make these updates as well. . . Once you have included the firebase configuration file(s) in the project, you can proceed to install the packages of the project from the terminal: . npm install . . Native Vector Icons . Source: https://aboutreact.com/react-native-vector-icons . Vector Icons are perfect for buttons, logos and tab bars, as part of the migration to your custom app it is necessary to include them as well. . Android . To use Vector Icon in Android we need to import the Icons from react-native-vector-icons: . Create assets/fonts directory in android/app/src/main | Once you create the fonts directory copy all the font files from node_modules/react-native-vector-icons/Fonts into it /android/app/src/main/assets/fonts | iOS . Follow the below steps to use vector icons in iOS: . Create a fonts directory in ios and copy all the font files from node_modules/react-native-vector-icons/Fonts into it | Now open the project YourSuperBrand -&gt; ios -&gt; YourSuperBrand.xcworkspace in Xcode | After opening the project in Xcode click on the project from the left sidebar to open the options and select Add Files to “YourSuperBrand” | Select the fonts directory which you have created. Remember to select Create Folder references from below and click Add | Now click the project name on the left top, and select the project name on TARGETS. Click the Info tab on the top menu to see Info.plist and add Fonts provided by application and font files under it Here we are adding two but you can add or remove according to your need. You can also add all font files which we have copied in above step. | . Creating an icon for your App . An important step to migrate to your personal brand is to update the App icon. To do this you must already have an image with your logo design, we recommend having the logo in a high quality image file of 1024x1024 pixels. Now that you have your logo you must generate multiple size files for both platforms: iOS and Android. . iOS . A simple way to generate the multiple image files is through a third tool, in the case of iOS we can use Icon Set Creator. . . After you generate the files, copy the generated folder AppIcon.appiconset and replace it in the directory of your project /iOS/YourSuperBrand/Images.xcassets/AppIcon.appiconset, you must also replace the Contents.json file. . Android . Source: https://developer.android.com/studio/write/image-asset-studio#access . For Android platform you can use the Asset Studio tool, included in Android Studio. So, open Android Studio and from the Project window, select the Android view. Then Right-click the res folder and select New &gt; Image Asset. . . After you open Image Asset Studio, you can add adaptive and legacy icons by following these steps: . In the Foreground Layer tab, select Image as Asset Type, and then specify the path for your image logo file. | You can use the slider Resize to specify a scaling factor in percent to resize the icon. | Click Next. | Click Finish. Image Asset Studio adds the images to the mipmap folders for the different densities. | . . Including a Splash Screen . iOS and Android applications natively handle the Splash Screen, which is activated every time the app starts and will automatically hide after a few seconds. Although a component is included in the project as a loading screen (/src/screens/splashScreen/index.js), it’s necessary to create this screen natively first, also to avoid showing the default blank loading screen. . For this guide we will design a simple Splash Sreen that is composed of a centered logo and a red background. We need three sizes for the logo image, to better match all the devices screen sizes (300px, 600px @x2, 900px @x3). . Add splash screen to iOS . First, open the project in Xcode from the project file: /ios/YourSuperBrand.xcworkspace, remember to open YourSuperBrand.xcworkspace and not YourSuperBrand.xcodeproj. In the left most navigator: . select YourSuperBrand &gt; YourSuperBrand &gt; Imagex.xcassets | click the + icon in the second left navigator and select New Image Set | name your image set SplashIcon | Add the three logo images (300px, 600px @x2, 900px @x3) selected earlier. You can drag and drop all of them at the same time, Xcode will sort them by pixel density automatically. | Once you have imported your logo you must edit the LaunchScreen, which is the storyboard created by default in a new React Native project. From Xcode, in the left most navigator: . open LaunchScreen.storyboard, select the generated labels and delete them. | select View, then on the right navigator, click on the Attribute inspector icon (2) | select a background color from the Background select list | in the top right of the Xcode window, click on the Library icon (4) to add a new Image View | search for Image view | and drag and drop this item into the View element | You can rename the Image View and select the uploaded splash icon from the Image View Panel on the right navigator | We need to make sure the icon is centered regardless of the device the app is running on. To do that: . Click on the Align button at the bottom right of the editor | Add new alignment constraints Horizontally in container and Vertically in container | To avoid a white screen flashing, just before the content is loaded, it’s necesary to include a few code lines referencing the react-native-splash-screen package. . In Xcode, open the file YourSuperBrand &gt; YourSuperBrand &gt; AppDelegate.m . Add #import &quot;RNSplashScreen.h&quot; with the other imports | Add [RNSplashScreen show]; just above return YES; in the didFinishLaunchingWithOptions method. | YourSuperBrand &gt; YourSuperBrand &gt; AppDelegate.m . #import &quot;AppDelegate.h&quot; #import &lt;React/RCTBridge.h&gt; #import &lt;React/RCTBundleURLProvider.h&gt; #import &lt;React/RCTRootView.h&gt; #import &lt;Firebase.h&gt; + #import &quot;RNSplashScreen.h&quot; ... @implementation AppDelegate - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { if ([FIRApp defaultApp] == nil) { [FIRApp configure]; } #ifdef FB_SONARKIT_ENABLED InitializeFlipper(application); #endif RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions]; RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@&quot;YourSuperBrand&quot; initialProperties:nil]; rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1]; self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds]; UIViewController *rootViewController = [UIViewController new]; rootViewController.view = rootView; self.window.rootViewController = rootViewController; [self.window makeKeyAndVisible]; + [RNSplashScreen show]; return YES; } ... . Add splash screen to Android . While for iOS we mostly use the Xcode interface, for Android we will directly create or edit code files this time. . Android assets are located in android/app/src/main/res. There is a folder for each pixel density. Add your splash screen logo to the folders following this mapping: . mipmap-mdpi = splash.png | mipmap-hdpi = splash@2x.png | mipmap-xhdpi = splash@3x.png | mipmap-xxhdpi = splash@3x.png | mipmap-xxxhdpi = splash@3x.png | . and then rename all the files to splash_icon.png. . Next we will set up several files in the Android project to manage the Splash Screen. . create a colors.xml file in /android/app/src/main/res/values, where you must include the selected background color, in this case: #FF2D55. You can include the following content: | . &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;resources&gt; &lt;color name=&quot;splashscreen_bg&quot;&gt;#FF2D55&lt;/color&gt; &lt;color name=&quot;app_bg&quot;&gt;#FF2D55&lt;/color&gt; &lt;/resources&gt; . create a background_splash.xml file in android/app/src/main/res/drawable with the list of layers composed of two items: the plain background and the included icon. Add the following code: /android/app/src/main/res/drawable/background_splash.xml | . &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@color/splashscreen_bg&quot;/&gt; &lt;item android:width=&quot;300dp&quot; android:height=&quot;300dp&quot; android:drawable=&quot;@mipmap/splash_icon&quot; android:gravity=&quot;center&quot; /&gt; &lt;/layer-list&gt; . open android/app/src/main/res/values/styles.xml and add these lines: | . &lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;android:textColor&quot;&gt;#000000&lt;/item&gt; + &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/app_bg&lt;/item&gt; + &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt; + &lt;item name=&quot;android:windowBackground&quot;&gt;@color/app_bg&lt;/item&gt; &lt;/style&gt; &lt;!-- Adds the splash screen definition --&gt; + &lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; + &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/splashscreen_bg&lt;/item&gt; + &lt;item name=&quot;android:background&quot;&gt;@drawable/background_splash&lt;/item&gt; + &lt;/style&gt; &lt;/resources&gt; . Now you have to configure the app to boot on the splash screen. . Open /android/app/src/main/AndroidManifest.xml and modify the contents as follows: | . &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.yoursuperbrand&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; &lt;application android:name=&quot;.MainApplication&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot; android:allowBackup=&quot;false&quot; android:theme=&quot;@style/AppTheme&quot;&gt; + &lt;activity android:name=&quot;.SplashActivity&quot; android:theme=&quot;@style/SplashTheme&quot; android:label=&quot;@string/app_name&quot;&gt; + &lt;intent-filter&gt; + &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; + &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; + &lt;/intent-filter&gt; + &lt;/activity&gt; + &lt;activity android:name=&quot;.MainActivity&quot; android:label=&quot;@string/app_name&quot; android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize|uiMode&quot; android:windowSoftInputMode=&quot;adjustResize&quot; android:exported=&quot;true&quot;/&gt; - &lt;activity android:name=&quot;.MainActivity&quot; android:label=&quot;@string/app_name&quot; android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize|uiMode&quot; android:launchMode=&quot;singleTask&quot; android:windowSoftInputMode=&quot;adjustResize&quot;&gt; - &lt;intent-filter&gt; - &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; - &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; - &lt;/intent-filter&gt; - &lt;/activity&gt; &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt; &lt;/application&gt; &lt;/manifest&gt; . Create a file /android/app/src/main/java/yoursuperbrand/SplashActivity.java with the contents: | . package com.yoursuperbrand; import android.content.Intent; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class SplashActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent intent = new Intent(this, MainActivity.class); startActivity(intent); finish(); } } . In android/app/src/main/java/yoursuperbrand/MainActivity.java, add these lines: | . package com.yoursuperbrand; import com.facebook.react.ReactActivity; + import org.devio.rn.splashscreen.SplashScreen; + import android.os.Bundle; public class MainActivity extends ReactActivity { + @Override + protected void onCreate(Bundle savedInstanceState) { + SplashScreen.show(this); + super.onCreate(savedInstanceState); + } ... } . Create a file /android/app/src/main/res/layout/launch_screen.xml with the contents: | . &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@drawable/background_splash&quot; android:orientation=&quot;vertical&quot;&gt; &lt;/LinearLayout&gt; . Running the app 🚀 . Great! You have finished all the configuration and it’s time to build and run your App. . iOS . From the terminal, go to your project folder and run these commands: . cd ios pod update pod install cd .. npm run ios . Voilà! . Android . If you’re working in an Android environment, to start the app you only have to run from the terminal: . npm android . Remember that you must have an Android simulator installed correctly for the application to run successfully. In case you have any problem running the app for the first time open with Android Studio the generated android project, located in the /android folder of the project. From Android Studio verify that the sync runs correctly from: File-&gt;Sync Project with Gradle Files menu and also that you have a simulator configured. .",
    "url": "http://localhost:4000/docs/migrating-to-your-brand/",
    "relUrl": "/docs/migrating-to-your-brand/"
  }
  ,"2": {
    "title": "Project structure",
    "content": "Project Structure . In this session we will describe the structure designed for this project. With this design we intend to offer you a solution adaptable to any kind of management app. With the combination of Redux and Firebase Realtime Database technologies we can generate a synchronized system, which allows the update in real time with all your devices. . . . Application modules Static images | | Redux, one state to rule them all Actions | Reducers | Middlewares | Store | | Components Class approach Connecting the class components to the store | | Hooks approach Connecting the hook components to the store | Search component | | | . Application modules . A structure must be simple enough for new team members to quickly get on board and immerse themselves into the project. . React’s ecosystem offers users complete control over everything, without being tied to any particular way of doing things. However, whenever we work on a React project it is necessary to use some kind of consensus to organize the source code. With this in mind, we believe that the ideal React project structure is the one that allows you to move around your code with the least amount of effort. Following this principle, Adventure Travel is made up of a simple project structure that allows you to easily scalate, adapt, reuse and create React Native components. In any case, you are welcome to adjust this structure for your own use case. . To get into context, let’s start analyzing the project from the JavaScript source code located in the /src folder. Remember that React Native uses the JavaScript language to generate from the source code to iOS and Android platforms, both in the /ios and android folders respectively. Inside the /src folder all the modules of the application will be organized. . 📂 src ┣ 📁 common ┣ 📁 components ┣ 📁 images ┣ 📁 redux ┣ 📁 screens ┗ 📦 package.json . Module Description . common | It contains the common elements such as global styles, colors, utils, database access, etc. | . components | Here we place the application components and their related styles. | . images | It contains the static images used in the project such as illustrations, logos, etc. | . navigation | This module contains the components related to navigation. It contains the paths and references to screens, modals and tabs. | . redux | It contains the elements related to Redux, such as: actions, reducers, middlewares and the store configuration. | . screens | It contains the components relating to the application screens and their related styles. | . You have probably noticed that in each of these modules the files index.js and package.json are included. Both files are used to export and define the module with global access within the project. . 📂 src ┣ 📂 common ┃ ┣ Color.js ┃ ┣ Device.js ┃ ┣ Images.js ┃ ┣ RealtimeDatabase.js ┃ ┣ Firestore.js ┃ ┣ Styles.js ┃ ┣ Util.js ┃ ┣ index.js ┃ ┗ 📦 package.json ┣ 📁 components ┣ 📁 images ┣ 📁 redux ┣ 📁 screens ┗ 📦 package.json . In the index.js file we must include all the module reference (imports) and then export it to make it visible outside the folder. . /src/common/index.js . import {Styles, FontSize} from &#39;./Styles&#39;; import Color from &#39;./Color&#39;; import Device from &#39;./Device&#39;; import Images from &#39;./Images&#39;; import RealtimeDatabase from &#39;./RealtimeDatabase&#39;; import Firestore from &#39;./Firestore&#39;; import Util from &#39;./Util&#39;; import GoogleAPIs from &#39;./GoogleAPIs&#39;; export { Styles, Color, FontSize, Device, Images, RealtimeDatabase, Firestore, Util, GoogleAPIs, }; . Also using the package.json file we can define the name of the package as global and use it anywhere in the project. . /src/common/package.json . { &quot;name&quot;: &quot;@common&quot; } . Now if you need to import something (like Color) from the common module you can refered it using @common route instead of all the static route. . import { Color } from &quot;@common&quot;; const primaryColor = Color.primary; . Static images . In any mobile application project it is necessary to use static image files (embedded in the app) instead of always downloading them from the Internet. This applies mainly for image files such as illustrations, logos, icons, etc. For this reason we have included a single folder to store all the embedded image files, located in the path: /src/images. We have included also the Images.js file in the @common module to export the reference of all the static images, located in the images folder. . /src/common/Images.js . export default { logoWhite: require(&quot;@images/logos/logoWhite.png&quot;), IllustSettings: require(&quot;@images/illustrations/settings.png&quot;), } . Whenever you need to use a static image just reference Images from the @common module. . import { Images } from &quot;@common&quot;; //.... return ( &lt;View&gt; &lt;Image source={Images.logoWhite} /&gt; &lt;/View&gt; ); . . Redux, one state to rule them all . Redux handles the entire application data flow within a single container while the previous state persists as well. . As an important part of our architecture, we include Redux for application status management. With Redux we can have one application state as a global state (“Single source of truth”), that includes all application data -like bookings and bookmarks- but also temporary states like search results, search history or popular destinations. . Tree view from React Native Debugger . To use this library (actually Redux is a library) a redux module was created that includes the actions, middlewares, reducers folders and the store.js file. Following the same logic as above, we have also included the package.json file for the module name. . 📂 src ┣ 📁 common ┣ 📁 components ┣ 📁 images ┣ 📂 redux ┃ ┣ 📁 actions ┃ ┣ 📁 middlewares ┃ ┣ 📁 reducers ┃ ┣ 📦 package.json ┃ ┗ store.js ┣ 📁 screens ┗ 📦 package.json . Actions . The whole state of the app is stored in an object tree inside a single store. The only way to change the state tree is to emit an action, an object describing what happened. (Redux Documentation) . Following this principle, the actions folder has been created as a container for the action files of each data object. For example, we have included the bookmarks.js file for all actions that manage bookmarks objects (saved items). Inside this file we can find a set of functions (Action Creators) to manage each action, for example, adding a new bookmark. So actions are the information (Objects) and action creator are functions that return these actions. . /src/redux/actions/bookmarks.js . const addBookmark = bookmark =&gt; { return { type: &quot;ADD_BOOKMARK&quot;, payload: bookmark } } // ....... export { // ....... addBookmark }; . Reducers . Actions only tell what to do, but they don’t tell how to do, so reducers are the pure functions that take the current state and action and return the new state and tell the store how to do. To summarize, the reducers specify how the actions transform the state tree. We have included the reducers folder to group the reducers of each object. . /src/redux/reducers/bookmarks.js . const defaultState = []; function reducer(state = defaultState, {type, payload}) { switch (type) { case &#39;ADD_BOOKMARK&#39;: { return [...state, payload]; } case &#39;DELETE_BOOKMARK&#39;: { return state.filter((b) =&gt; b.id !== payload); } case &#39;CLEAR_BOOKMARKS&#39;: { return defaultState; } default: return state; } } export default reducer; . Middlewares . Basically a middleware is some code you can put between the framework receiving a request, and the framework generating a response. Redux middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer. You can usually use Redux middleware for logging, crash reporting, talking to an asynchronous API, routing, and more. - Redux Middleware . In this architecture we have included a middleware to manage the synchronization between remote data (Firebase Realtime Database) and local data (local store). For example, when we call the action ADD_BOOKMARK this middleware will be invoked, the action will be detected and the information will be sent to the remote database. At the same time the action is executed and the local store is updated from the corresponding reducer. . /src/redux/middlewares/firebase.js . import database from &#39;@react-native-firebase/database&#39;; import auth from &#39;@react-native-firebase/auth&#39;; const firebase = (store) =&gt; (next) =&gt; (action) =&gt; { switch (action.type) { case &#39;ADD_BOOKMARK&#39;: next(action); database() .ref(`/bookmarks/${auth().currentUser.uid}/${action.payload.id}`) .set({...action.payload, created: new Date().getTime()}); break; //........ } }; export default firebase; . The above example applies to updating remote data, however when using Firebase Realtime Database, synchronization can occur in reverse. That is, if you update the remote data, either from another device or from another interface such as a website, you must also update the local store. To complete this cycle a startListening function has been added to “listen” all the time for remote Firebase updates and update the local store only if the information does not exist. . /src/common/RealtimeDatabase.js . import database from &#39;@react-native-firebase/database&#39;; import {store} from &#39;@redux/store&#39;; const RealtimeDatabase = (() =&gt; { return { startListening: () =&gt; { const {user} = store.getState(); /* Listening for new bookmark */ database() .ref(`bookmarks/${user.uid}`) .orderByChild(&#39;created&#39;) .on(&#39;child_added&#39;, (snapshot) =&gt; { const newBookmark = snapshot.val(); const {bookmarks} = store.getState(); const exist = bookmarks.some((b) =&gt; b.id === newBookmark.id); // Add only if you are on another device (the bookmark doesn&#39;t exist) if (!exist) { store.dispatch({ type: &#39;ADD_BOOKMARK&#39;, payload: newBookmark, }); } }); //........ })(); export default RealtimeDatabase; . Store . The store is the object which holds the state of the application. We have created the store.js file to include the single store for the entire application, as recommended by the Redux documentation: . It’s important to note that you’ll only have a single store in a Redux application. When you want to split your data handling logic, you’ll use reducer composition instead of many stores. - Redux Documentation . To start using the store instance you just need to import and call createStore. In our case we use multiple reducers, therefore it is necessary to include the combineReducers() function to combine several reducers into one. . /src/redux/store.js . import {createStore, combineReducers, compose, applyMiddleware} from &#39;redux&#39;; import {persistStore, persistReducer} from &#39;redux-persist&#39;; import thunk from &#39;redux-thunk&#39;; import firebase from &#39;./middlewares/firebase&#39;; // ... import searchHistory from &quot;./reducers/searchHistory&quot;; import bookmarks from &quot;./reducers/bookmarks&quot;; import bookings from &quot;./reducers/bookings&quot;; import config from &#39;./reducers/config&#39;; const reducer = combineReducers({ // ... searchHistory, bookmarks, bookings, config, }); . We also use Redux-Persist to save the Redux store when the app is closed, and refer to the middlewares: firebase middleware (described above) and Redux-Thunk middleware to write Action Creators that return a function instead of an action. This last element is the one that allows us to create actions such as addBookmark as functions. . /src/redux/store.js . const persistConfig = { key: &#39;root&#39;, storage: AsyncStorage, whitelist: [ &#39;user&#39;, &#39;explore&#39;, &#39;categories&#39;, &#39;popular&#39;, &#39;searchHistory&#39;, &#39;bookmarks&#39;, &#39;bookings&#39;, &#39;config&#39;, ], blacklist: [], }; const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; const persistedReducer = persistReducer(persistConfig, reducer); const store = createStore( persistedReducer, composeEnhancers(applyMiddleware(thunk, firebase)), ); let persistor = persistStore(store); export {persistor, store}; . Below, we specify how the store is connected to the user interface. . . Components . As you probably know, React bases its architecture on components. That is: each piece of an app is handled as an isolated component (class or Hook) where its own states, properties, styles and the access to the store are handled. With Adventure Travel you have a variety ready-to-use components to create your own mobile application from both approaches: Hooks or Classes. Components like ButtonGradient, CardPopular or ImageCollage can be found in the /src/components folder. Similarly we have created a folder to organize the components relating to the screens of the app: /src/screens. In this way we separate more atomic components like ButtonGradient from the more complex ones that compose a screen. . Class approach . From a Class approach, each component extends from React.PureComponent and implements a render() method where the UI is returned in jsx format. In each of these components we also include the use of propTypes to declare the properties required by the component and its data type. When props are passed to a component, they are checked against the type definitions configured in the propTypes property. When an invalid value is passed to a property, a warning signal is displayed on the console. To learn more about how you can use prop-types and all the available validators, see their documentation. . /src/components/ButtonBookmark/index.js (Class approach) . import React from &quot;react&quot;; import PropTypes from &quot;prop-types&quot;; class ButtonBookmark extends React.PureComponent { constructor(props) { super(props); // ... } render() { // ... } } ButtonBookmark.propTypes = { experienceId: PropTypes.number } const styles = StyleSheet.create({ content: { alignSelf: &quot;flex-end&quot;, alignItems: &quot;flex-end&quot;, padding: 8 }, icon: { fontSize: 20 } }); . Likewise, each component includes the reference to the component’s own styles using StyleSheet within the same file. Using the constant styles you can access the styles inside each component. . Connecting the class components to the store . To connect the Redux store to the UI (components) we use the connect() function from react-redux. This function provides to the connected component the data it requires from the store, and the functions it can use to send actions to the store. If the component requires the use of an action that handles the state of the application, such as addBookmark, we can import the functions that we had already created in the actions folder. . import React from &quot;react&quot;; import { addBookmark, deleteBookmark } from &quot;@redux/actions/bookmarks&quot;; import { connect } from &quot;react-redux&quot;; . Then we must create the mapStateToProps object to specify the properties we want to use from the global state and the mapDispatchToProps object to link the imported functions that act on the global state. We can then invoke the connect function using these objects as parameters and connect the component (ButtonBookmark in this example) to export it. This way you can access the declared properties to read the global state values and the functions to modify the global state. . /src/components/ButtonBookmark/index.js . import React from &quot;react&quot;; import PropTypes from &quot;prop-types&quot;; import { addBookmark, deleteBookmark } from &quot;@redux/actions/bookmarks&quot;; import { connect } from &quot;react-redux&quot;; class ButtonBookmark extends React.PureComponent { // ... } // ... const mapStateToProps = state =&gt; { return { bookmarks: state.bookmarks, experiences: state.explore.experienceResults.experiences }; }; const mapDispatchToProps = { addBookmark, deleteBookmark }; export default connect(mapStateToProps, mapDispatchToProps)(ButtonBookmark); . Now within the functions of the component it is possible to access as a property to the global state of bookmarks (this.props.bookmarks) or experiences (this.props.experiences). Similarly, the functions this.props.addBookmark and this.props.deleteBookmark can be accessed as properties. . render() { const booked = this.props.bookmarks.some(b =&gt; b.id == this.props.experienceId); return ( &lt;TouchableOpacity style={styles.content} onPress={booked ? this.removeBookmark : this.addBookmark} &gt; &lt;Icon name={booked ? &quot;heart&quot; : &quot;hearto&quot;} color={booked ? Color.heart : Color.background} style={styles.icon} /&gt; &lt;/TouchableOpacity&gt; ); } addBookmark = () =&gt; { const experience = this.props.experiences.find(e =&gt; e.id == this.props.experienceId); this.props.addBookmark(experience); } removeBookmark = () =&gt; { this.props.deleteBookmark(this.props.experienceId) } . Hooks approach . Hooks approach, on the other hand, uses a function as a component with all properties included in a single object in the function parameter. . /src/components/ButtonBookmark/index.js (Hooks approach) . import React, {useEffect} from &quot;react&quot;; const ButtonBookmark = ({experienceId, name, confirm = false}) =&gt; { useEffect(() =&gt; { // ... }, []); return ( // ... ); }; const styles = StyleSheet.create({ content: { alignSelf: &quot;flex-end&quot;, alignItems: &quot;flex-end&quot;, padding: 8 }, icon: { fontSize: 20 } }); . Likewise, each component includes the reference to the component’s own styles using StyleSheet within the same file. Using the constant styles you can access the styles inside each component. . Connecting the hook components to the store . To connect the Redux store to the UI (components) we use the useSelector and useDispatch hooks from react-redux. The useSelector function provides to the component the data it requires from the store, and the useDispatch function it’s used to send (dispatch) actions to the store. If the component requires the use of an action that handles the state of the application, such as ADD_BOOKMARK, you can import it from the reducers folder. . import React from &quot;react&quot;; import {ADD_BOOKMARK, DELETE_BOOKMARK} from &#39;@redux/reducers/bookmarks&#39;; import {useSelector, useDispatch} from &#39;react-redux&#39;; . Then you can create a variable to access to any state of the application through the useSelector function. Also you can create a dispatch variable from the useDispatch hook to send an action to the store such as ADD_BOOKMARK or DELETE_BOOKMARK. . /src/components/ButtonBookmark/index.js . import React from &quot;react&quot;; import {ADD_BOOKMARK, DELETE_BOOKMARK} from &#39;@redux/reducers/bookmarks&#39;; import {useSelector, useDispatch} from &#39;react-redux&#39;; const ButtonBookmark = ({experienceId, name, confirm}) =&gt; { const bookmarks = useSelector((state) =&gt; state.bookmarks); const booked = bookmarks.some((b) =&gt; b.id === experienceId); const experiences = useSelector((state) =&gt; state.explore.experienceResults.experiences); const dispatch = useDispatch(); const handleAddBookmark = () =&gt; { const experience = experiences.find((e) =&gt; e.id === experienceId); dispatch({type: ADD_BOOKMARK, payload: experience}); }; const handleRemoveBookmark = () =&gt; { if (confirm) { confirmRemoveBookmark(); } else { dispatch({type: DELETE_BOOKMARK, payload: experienceId}); } }; return ( // ... ); . Search component . From version 1.0.5 you can make dynamic searches of Experiences, we incorporated geolocation-based search methods for dynamic search results. We have added a simple algorithm to search for locations based on geohash coordinates, which you may find useful in your project. . What is Geohashing anyway? . Geohashing is a geocoding method used to encode geographic coordinates (latitude and longitude) into a short string of digits and letters delineating an area on a map, which is called a cell, with varying resolutions. The more characters in the string, the more precise the location. PubNub . In this case a location (latitude and longitude) and a geohash (the coding of location) has been added to each experience, stored in the experiences collection. . . To codify a geohash from coordinates you can use an online tool like Geohashes Movable Type Scripts or for React Native, use the ngeohash library: . import geohash from &#39;ngeohash&#39;; const lat = 38.7437396; const lon = -9.230243; const geohash = geohash.encode(lat, lon); console.log(geohash); // output: eyckmv . With a range of geohash codes (lower and upper) it is possible to do a search by a single string index (geohash) in the database, where the closest geohashes in string indicate the proximity in distance: . // Search of experiences in database according to a range of geohahes const querySnapshot = await firestore() .collection(&#39;experiences&#39;) .where(&#39;geohash&#39;, &#39;&gt;=&#39;, geoRange.lower) .where(&#39;geohash&#39;, &#39;&lt;=&#39;, geoRange.upper) .get(); .",
    "url": "http://localhost:4000/docs/project-structure/",
    "relUrl": "/docs/project-structure/"
  }
  ,"3": {
    "title": "Push Notifications",
    "content": "Push Notifications . We have added push notifications to this project, allowing you to send alerts to users using Firebase Cloud Messaging (FCM) service. FCM is a cross-platform messaging solution that lets you reliably send messages at no cost. Notifications can be sent directly from Firebase Console or through third party applications integrated with FCM. If you want to set up push notifications for your project on iOS you need to make some security settings first. But for Android projects you are not required to do anything else and you can start testing by broadcasting push notifications from FCM. . . . Apple Push Notifications service (APNs) configuration Generate a Certificate Request | Generate a certificate from Apple Developer Program | Generate and import a .p8 key | | Broadcasting Push Notifications from FCM | . Apple Push Notifications service (APNs) configuration . As a first requirement you should keep in mind that push notifications for iOS is only possible on physical devices and does not apply to simulators. Therefore, if you want to test push notifications in iOS, you should connect a physical device to your computer and run the app from there. Also you must have a paid Apple Developer Program account to create certificates for push notifications. . Security certificates are required to start push notifications on iOS-based devices. Below we will describe the steps required to obtain and configure development certificates, which although indicated as being for development, it is also possible to use it in production applications. However, it is recommended to use certificates issued by certified authorities for production applications. . Generate a Certificate Request . We must start by generating a certificate request, for that we must open the Keychain Access program, accessible from Finder-&gt;Applications-&gt;Utilities in a MAC environment. From the main menu of Keychain Access, select the menu Certificate Assistant-&gt;Request a Certificate From a Certificate Authority… . . In the assistant you must fill out an applicant’s email address, the name and email address of the authority, in this case as it is a development environment you can put any value. Then select save to disk and continue to generate a certificate request file that you should save for the next action. . . Generate a certificate from Apple Developer Program . With the certificate request file, generated previously, you can get a certificate for the push notifications. To do that, you must log in to the Apple Developer Program site using your apple developer account and go to the Account menu and then to Certificates, IDs &amp; Profiles. Select Identifiers from the menu on the left to add/edit your app identifier. . . If your app identifier is not created yet you can click on the plus icon to add your app identifier. In this case you must register an App ID, specify the Bundle ID and check the option for Push Notifications. If your App ID already exists select it and go to Push Notifications and check it. Then select the configure button. . . Then click on the Create Certificate button under the Development SSL Certificate option. . . From the new screen you must upload the Certificate Signing Request file, generated previously. . . Finally click on continue to generate the certificate and download it. Open the downloaded certificate by double-clicking it to import it into Keychain Access and have it installed in your environment. . After the certificate is imported into Keychain Access, open the iOS project from Xcode and select the tab Signing &amp; Capabilities and then the option + Capability. Add the capabilities Push Notifications and Background Modes and check the option Remote notifications. . . Generate and import a .p8 key . To start sending push notifications from the FCM service it is necessary to first generate a .p8 key to sign the messages. To do this you must go back to Certificates, IDs &amp; Profiles from the Apple Developer Program site and select the Keys menu and click on the plus icon to add a new key. Specify a name for the new key, check the APNs option and click continue. . . Download the key once it is generated. Note that you can only download once, so you must store it securely. Similarly copies the value of the Key ID, although you can always access this value from the Keys menu. . This .p8 key must be added to Firebase Cloud Messaging in order to issue push notifications. To do this you must go to the Firebase Console and access to the Project Settings menu. . . Then access to the Cloud Messaging tab and go down to the iOS app configuration option to upload the .p8 file. . . From the upload dialog you must to specify the Key ID related to the key and the Team ID; this last value is available from Membership Details. . Once you successfully upload the key you are ready to broadcast push notifications! . Broadcasting Push Notifications from FCM . Once you have the app configured to send push notifications you can start with a simple test to validate this. Remember that for notifications on iOS devices you must first configure APNs, however it will be possible to receive notifications as modals in any simulator while the app is active. That is, while the app is active you can receive notifications and show them in a dialog or any component you want to design for that. This behavior is defined by the onMessage method included in /src/screens/splashScreen/index.js for handling new messages, while the app is in active mode. If the app is in background or inactive mode the notification will be handled by the system. . To start with a simple test run the React Native project and go to the console to copy the value of the token key generated for your device, printed on the React Native console. . . With this copied value go to the Firebase Console and select the Cloud Messaging menu and then click on the Send your first message button to compose the notification. From the Compose notification screen enter the Notification title and the Notification text, then click on the Send test message button. . . In the new modal enter the token key value, copied previously, and click on Test button to send the notification to your device. . . If you have a physical device connected and the app is not in active mode, you should see the push notification in the message box. . . If you are using a simulator or a connected physical device and the app is in active mode, you should see the notification from an Alert Dialog. . .",
    "url": "http://localhost:4000/docs/push-notifications/",
    "relUrl": "/docs/push-notifications/"
  }
  ,"4": {
    "title": "Getting started",
    "content": "Getting started . Thank you for purchasing Adventure Travel - React Native App! We hope you can take advantage of it to launch your Android/iOS project in a fast and well-structured way. . Below you will find the documentation to deploy this project, but first make sure you have a React Native CLI environment installed properly. If you do not have an environment installed yet, we recommend following the steps for React Native CLI Quickstart in the official React native documentation, where you can get information to configure environments for Android and iOS in Windows, Linux or macOS. . Once you have your environment ready, extract the project source code to your workspace and continue with the next session to start setting up the backend environment or maybe you prefer to start by migrating this project to your own brand. .",
    "url": "http://localhost:4000/docs/getting-started/",
    "relUrl": "/docs/getting-started/"
  }
  ,"5": {
    "title": "Backend configuration",
    "content": "Backend Configuration . As part of the architecture we have included the use of Firebase as a complement for backend operations. Firebase is a Google Backend-as-a-Service (BaaS) platform that helps you build, improve and grow your applications. It offers a wide range of features, but for the purposes of this project we will focus on the following services: . Firebase Authentication (For our user authentication service) | Firebase Realtime Database (As realtime database) | Cloud Firestore (As database) | Cloud Messaging (For Push Notifications) | . Warning: Before running the app for the first time, it’s required to first configure a new application from Firebase Console platform. . Below we describe all the steps to configure the Firebase based backend. . . . Create a Firebase project Register your app with Firebase (iOS) | Register your app with Firebase (Android) | | Firebase Authentication Apple Sign-in | | Firebase Realtime Database | Cloud Firestore | Cloud Messaging (Push Notifications) | . Create a Firebase project . Before you can add Firebase to your app, you need to create a Firebase project to connect to your iOS or Android app. Follow these steps or consult the Firebase documentation to create a new project. . Sign into Firebase using a Google account. | In the Firebase console, click Add project, then select or enter your Project name | Click Continue. | Click Create project | Firebase automatically provides resources for your project. When the process completes, you’ll be taken to the overview page of your Firebase project. . . Register your app with Firebase (iOS) . If you are working with the iOS platform it’s necesary to register a new iOS App in Firebase. From the Project Overview, use the Add app option and then select the iOS icon to open the registration wizard. . . In the registration wizard you must fill out your iOS bundle ID, example: com.myadventure.app. This will be the identifier of your app and later you will have to put it in Xcode as well. . . In the next step you must download the configuration file GoogleService-Info.plist and continue to the end to complete the app registration. This file contains all the information to link the app with the created project, allowing you to access any of the Firebase services. . Warning: This file may be generated with .xml extension, however the project will not recognize this extension so it’s very important to change it to .plist after you download it. . The downloaded GoogleService-Info.plist file must be added to the project from Xcode. Inside Xcode you must also change the Bundle Identifier, the app version and the build number. . . . If you want to migrate in depth to a new App, you can review: Migrating to your own brand. . . Register your app with Firebase (Android) . If you are working with the Android platform it’s necesary to register a new Android App in Firebase. From the Project Overview, use the Add app option and then select the Android icon to open the registration wizard. . . In the registration wizard you must fill out an Android package name for your app, example: com.adventuretravelapp. This will be the identifier of your app and later you will also have to include it in the android project. . . Download the generated configuration file google-service.json and continue until the end of the wizard to complete the app registration in Firebase. This file contains all the information to link the app with the created project, allowing you to access any of the Firebase services. . . The downloaded google-service.json file must be added to the project inside the /android/app/ directory. Then you can set the Android package name (applicationId) and versionName in the /android/app/build.gradle file. . ... defaultConfig { applicationId &quot;com.yoursuperbrand&quot; minSdkVersion rootProject.ext.minSdkVersion targetSdkVersion rootProject.ext.targetSdkVersion versionCode 1 versionName &quot;1.0&quot; } ... . After that you must setup the Firebase project to allow the authentication, create the databases and activate the push notifications (optional). . Firebase Authentication . Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Apple, Facebook and Twitter, and more. - Firebase Authentication Docs . As authentication method we use Email/Password authentication provider, which allows users to register with their email address and password. Firebase Authentication also provide email address verification, password recovery, and email address change primitives. To activate the Email/Password provider go to the Authentication menu of your project in Firebase Console. Then select the Sign-in method tab and activate the Email/Password provider to start using this authentication method in the app. . . Apple Sign-in . For iOS devices you can also activate authentication with Apple Sign-in. With Apple Sign-in users can access the App using their Apple Account and hiding their email address. To activate Apple Sign-in you must go to the Authentication menu of your project in Firebase Console. Then select the Sign-in method tab and activate the Apple provider to start using this authentication method in the app. . . To complete the activation of Apple Sign-in you must go to the Apple Developer Program site using your apple developer account and go to the Account menu and then to Certificates, IDs &amp; Profiles. Select Identifiers from the menu on the left to add/edit your app identifier. . . If your app identifier is not created yet you can click on the plus icon to add your app identifier. In this case you must register an App ID, specify the Bundle ID and check the option for Sign In with Apple. If your App ID already exists select it and go to Sign In with Apple and check it. . . In this way you have already configured the Sign in with Apple. If you do not want to include this option you can remove the AppleButton from the LoginScreen screen located in /src/screens/loginScreen/index.js. . . Firebase Realtime Database . In some cases you may need to handle data that requires realtime updating to be displayed on different devices at the same time. We have incorporated Firebase Realtime Database (FRD) to store and handle in real time: bookmarks, user information and bookings. When you connect your app to FRD, you’re actually connecting through a WebSocket. WebSockets are much faster than the HTTP protocol, you don’t have to make individual WebSocket calls, because a single socket connection is enough. This allows all your data to be automatically synchronised through that single WebSocket. When you save a change in data, all connected clients receive the updated data almost instantly from the backend. . . For this project it’s necessary to create a FRD before running the app for the first time. To do this just go to the Realtime Database menu from Firebase Console and click on Create Database button. Then select the option Start in test mode, just to start using it, later you must include some validation rules for a better security. . . With the introduction of this remote database system we hope you will be able to use it plainly in your project for all the data you need to store and synchronize in realtime. . . Cloud Firestore . There are also data that may not require updating in real time and just run the typical CRUD (Create, Read, Update, Delete) operations of a database without any realtime subscription. In this case we also use Cloud Firestore to store application data such as experiences, categories and popular sites, therefore it’s required to create a Firestore database first. To create a Firestore database in your proyect go to the Cloud Firestore menu from Firebase Console and click on Create Database button. Then select the option Start in test mode, just to start using it, later you must include some validation rules for a better security. . . . At this point we should have all the backend configuration completed, then we can move on to make other adjustments to the app code and start running it. . Cloud Messaging (Push Notifications) . We have added push notifications to this project, allowing you to send alerts to users using Firebase’s Cloud Messaging service. Firebase Cloud Messaging (FCM) is a cross-platform messaging solution that lets you reliably send messages at no cost. Notifications can be sent directly from Firebase Console or through third party applications integrated with FCM. . The notification service is included by default in Firebase iOS and Android projects, however you need to make a few adjustments before you can start using it. For now we recommend to follow the guide to configure the app and run it for the first time and finally proceed with the settings for Push Notifications. .",
    "url": "http://localhost:4000/docs/backend-config/",
    "relUrl": "/docs/backend-config/"
  }
  ,"6": {
    "title": "App configuration",
    "content": "App configuration . Once the backend is configured, we will make some adjustments to build and execute the app. . . . Google APIs setup Enviroment variables | Additional settings for Google Maps | | Building the app 🚀 Running on iOS environment | Running on Android environment | Running for the first time | | Script commands | Ensuring code quality Formatting the code | | . Google APIs setup . Google API offers an indispensable set of features that can be very useful as a complement or essence of many modern applications. Services such as Search, Gmail, Translate, Calendar or Google Maps are included here and we can take advantage of them for use in our apps. In this project we focus on two of these services: . Google Places (for the searches) | Google Maps | . . To start using the Google API services you must first create a (free) Google Cloud Platform account and follow these steps to get, restrict and enable a Google API key. Once you get your API key, continue with the following statement to add it to the environment file. . . Enviroment variables . If you need to use enviroment variables like URLs, API keys, usernames, passwords or any other parameter in your app, we include the .env file to store it. We use the react-native-dotenv package to import the configuration variables from a .env file. If you need to use the Google Map Service, for example, you must to include the GOOGLE_API_KEY variable with the API key value. . /.env . GOOGLE_API_KEY=YOUR_API_KEY_VALUE_HERE ANOTHER_CONFIG=true . You can then import and use any of the defined variables. . import {GOOGLE_API_KEY, ANOTHER_CONFIG} from &#39;react-native-dotenv&#39;; . If you have a separate development and production environment, that requires different configuration variables, you can use an .env file for the development/test environment variables and another .env.production file for the production environment variables that are used in releases. . Additional settings for Google Maps . In any case that you need to use Google Maps in your project, you must also add the value of the api key (previously obtained from Google Cloud Platform Console) in a couple of additional files. . For IOS based applications you must edit /ios/adventureTravelApp/AppDelegate.m (line: 23) file and add the value of the api key in the line indicated: . /ios/adventureTravelApp/AppDelegate.m . ... #import &lt;React/RCTRootView.h&gt; #import &lt;GoogleMaps/GoogleMaps.h&gt; @implementation AppDelegate - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { if ([FIRApp defaultApp] == nil) { [FIRApp configure]; } + [GMSServices provideAPIKey:@&quot;YOUR_API_KEY_VALUE_HERE&quot;]; RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions]; ... . For Android based applications you must edit /android/app/src/main/AndroidManifest.xml file and add the value of the api key in the line indicated: . /android/app/src/main/AndroidManifest.xml . ... &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt; + &lt;meta-data android:name=&quot;com.google.android.geo.API_KEY&quot; android:value=&quot;YOUR_API_KEY_VALUE_HERE&quot;/&gt; &lt;uses-library android:name=&quot;org.apache.http.legacy&quot; android:required=&quot;false&quot;/&gt; &lt;/application&gt; ... . . Building the app 🚀 . Once you have all the previous configurations ready, we can then start the build and execution of the project. Let’s start by installing the node modules, to do this go to the project folder from the terminal and run: . npm install . and wait for all the packages to be installed. . Running on iOS environment . For iOS environment it’s necesary to install the Podfile. The Podfile it’s located in /ios/Podfile project route and contains the dependencies of the node modules that target the Xcode project. To install this references, access from the terminal to the ios folder and install the pod files: . cd ios/ pod install . Note that every time you add or update a node module you must execute this action to update the references in the iOS project. After the references are installed, go back to the project root folder and run the command to start the application: . cd .. npm run ios . With this command you must generate the application for iOS and raise the simulator you have configured. If you have any problem when you start the app for the first time, try to run it from Xcode to validate the project configuration. . Running on Android environment . If you’re working in an Android environment, to start the app you only have to run from the terminal: . npm run android . Remember that you must have an Android simulator installed correctly for the application to run successfully. In case you have any problem running the app for the first time open with Android Studio the generated android project, located in the /android folder of the project. From Android Studio verify that the sync runs correctly from: File-&gt;Sync Project with Gradle Files menu and also that you have a simulator configured. . Running for the first time . The first time you run the application, sample data will be registered in the Cloud Firestore database (previously registered in the backend configuration). This way, experiences, categories and popular places will be registered in the database, which can be used as a starting point to add your own data, either from the Firebase Console or from a third App. . . . Script commands . In addition to the default commands, included in the global package.json file, we have added a few additional npm commands to provide a quick access to useful tools for code maintenance. You can use, for example, the command npm run clean to delete the node_modules, auto-generated files and reinstall the node_modules again. This command can be useful when you have building errors or incompatibility between new installed modules. As we always say: feel free to add or change what you need, in this case any command. . /package.json . ... &quot;scripts&quot;: { &quot;android&quot;: &quot;react-native run-android&quot;, &quot;ios&quot;: &quot;react-native run-ios&quot;, &quot;start&quot;: &quot;react-native start&quot;, &quot;test&quot;: &quot;jest&quot;, &quot;lint&quot;: &quot;eslint .&quot;, &quot;lint:fix&quot;: &quot;eslint --fix .&quot;, &quot;clean&quot;: &quot; rm -fr ./node_modules dist/* ios/build ios/Pods ios/KScoreApp.xcarchive android/build android/app/build public/js public/assets &amp;&amp; npm install&quot; }, ... . . Ensuring code quality . As you may have noticed, in the previous scripts, we have also included the lint command to run the ESLint tool. With this tool we can keep our code according to the ECMAScript standard and other rules you want to use to detect and avoid possible errors and inconsistencies. . ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs. - ESLint Documentation . To configure ESLint you can open the .eslintrc file from the main path. In this file you can include the rules for code validation, however in our case we will extends the rules from react-native-community, the official package for react-native. If you want to extend from another configuration or include your own rules, you can consult the official ESLint documentation. . /.eslintrc . { &quot;extends&quot;: &quot;@react-native-community&quot; } . Then, if you execute the command npm run lint from console a report is generated with the warnings and errors found in the whole project. . . You can also use the command npm run lint:fix to try to fix as many issues as possible. The fixes are made to the actual files themselves and only the remaining unfixed issues are output. You should keep in mind that not all problems can be fixed using this option. . Formatting the code . One way to maintain a common style of code in the project is by using a code formatting tool. In this project we have used Prettier, which is also integrated with ESLint. Prettier supports JavaScript but also other formats like JSX or JSON. To include Prettier integrated with ESLint we have added plugin:prettier/recommended to the ESLint configuration file. . /.eslintrc . { &quot;extends&quot;: [&quot;@react-native-community&quot;, &quot;plugin:prettier/recommended&quot;] } . We have also added the rules for Prettier in the .prettierrc configuration file. Here we can add the rules that we estimate to validate the coding style. You can see more details of the Prettier configuration from the documentation site. . /.prettierrc . { &quot;bracketSpacing&quot;: false, &quot;jsxBracketSameLine&quot;: true, &quot;singleQuote&quot;: true, &quot;trailingComma&quot;: &quot;all&quot; } . Now with this last configuration we can also get the unformatted errors using the same npm run lint command. . . This time, with the use of the npm run lint:fix command, the code will take the proper format, keeping the standard in all the source code. . *If you are using Visual Studio Code you should try the ESLint extension. The extension will highlight the linter error right inside the editor, and you can disable or tweak the rule however you want. .",
    "url": "http://localhost:4000/docs/app-config/",
    "relUrl": "/docs/app-config/"
  }
  ,"7": {
    "title": "Firebase Database Rules",
    "content": "Firebase Database Rules . Firebase Database Rules (in both scenarios: Realtime Database and Firestore) determine who has read and write access to your database, how your data is structured, and what indexes exist. These rules live on the Firebase servers and are enforced automatically at all times. Every read and write request will only be completed if your rules allow it. . . . Realtime Database Rules | Cloud Firestore Security Rules | . Realtime Database Rules . To manage the security rules of Realtime Databases you must go to the Realtime Database menu from Firebase Console and select the Rules tab. If you have created a database in test mode, you probably have a security rules configuration where you allow anyone to do read and write operations to the database. . Default security rules in test mode: . { &quot;rules&quot;: { &quot;.write&quot;: true, &quot;.read&quot;: true, } } . This configuration is appropriate for development and testing environments, but for a production environment it is recommended to add more restrictive rules. For instance we could add rules where for each collection that you try to read or modify is necessary before being authenticated. For that we could use rules like the following: . { &quot;rules&quot;: { &quot;users&quot;: { &quot;$uid&quot;: { &quot;.write&quot;: &quot;$uid === auth.uid&quot;, &quot;.read&quot;: &quot;$uid === auth.uid&quot;, } }, &quot;bookmarks&quot;: { &quot;$uid&quot;: { &quot;.write&quot;: &quot;$uid === auth.uid&quot;, &quot;.read&quot;: &quot;$uid === auth.uid&quot;, } }, &quot;bookings&quot;: { &quot;$uid&quot;: { &quot;.write&quot;: &quot;$uid === auth.uid&quot;, &quot;.read&quot;: &quot;$uid === auth.uid&quot;, } } } } . To deepen the security rules of Realtime Database you can review the official documentation. . Cloud Firestore Security Rules . Similar to Realtime Database, Firestore handles security rules for database operations. To manage these security rules you must go to the Cloud Firestore menu from Firebase Console and select the Rules tab. If you have created a database in test mode, you probably have a security rules configuration to allows anyone on the internet to view, edit, and delete all data in your Firestore database. This configuration may also have an expiration time of 30 days, after which all client requests to your Firestore database will be denied. . Default security rules in test mode: . rules_version = &#39;2&#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.time &lt; timestamp.date(2020, 8, 2); } } } . As you can see, this configuration leaves your app open to attackers. Therefore it is necessary to add rules that guarantee a minimum of security. It would be enough to begin that all the solitudes are of reading only and that the user has to be authenticated to be able to access the documents. . rules_version = &#39;2&#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read: if request.auth != null; } } } . In this session we only intend to introduce the concept of Firebase Database Rules so you can add a set of rules that guarantee a minimum of safety. If you want to go deeper and add other more complex configurations, you can access the Cloud Firestore Security Rules documentation. .",
    "url": "http://localhost:4000/docs/firebase-database-rules/",
    "relUrl": "/docs/firebase-database-rules/"
  }
  ,"8": {
    "title": "PRIVACY NOTICE",
    "content": "PRIVACY NOTICE . Last updated May 30, 2020 . Thank you for choosing to be part of our community at Svalbard (“Company”, “we”, “us”, or “our”). We are committed to protecting your personal information and your right to privacy. If you have any questions or concerns about our notice, or our practices with regards to your personal information, please contact us at app@svalbard.dev. . When you visit our mobile application, and use our services, you trust us with your personal information. We take your privacy very seriously. In this privacy notice, we seek to explain to you in the clearest way possible what information we collect, how we use it and what rights you have in relation to it. We hope you take some time to read through it carefully, as it is important. If there are any terms in this privacy notice that you do not agree with, please discontinue use of our Apps and our services. . This privacy notice applies to all information collected through our mobile application, (“Apps”), and/or any related services, sales, marketing or events (we refer to them collectively in this privacy notice as the “Services”). . Please read this privacy notice carefully as it will help you make informed decisions about sharing your personal information with us. . . WHAT INFORMATION DO WE COLLECT? | HOW DO WE USE YOUR INFORMATION? | WILL YOUR INFORMATION BE SHARED WITH ANYONE? | DO WE USE COOKIES AND OTHER TRACKING TECHNOLOGIES? | DO WE USE GOOGLE MAPS? | HOW LONG DO WE KEEP YOUR INFORMATION? | HOW DO WE KEEP YOUR INFORMATION SAFE? | DO WE COLLECT INFORMATION FROM MINORS? | WHAT ARE YOUR PRIVACY RIGHTS? | CONTROLS FOR DO-NOT-TRACK FEATURES | DO CALIFORNIA RESIDENTS HAVE SPECIFIC PRIVACY RIGHTS? | DO WE MAKE UPDATES TO THIS POLICY? | HOW CAN YOU CONTACT US ABOUT THIS POLICY? | HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU? | . WHAT INFORMATION DO WE COLLECT? . In Short: Some information — such as IP address and/or browser and device characteristics — is collected automatically when you visit our Apps. . We automatically collect certain information when you visit, use or navigate the Apps. This information does not reveal your specific identity (like your name or contact information) but may include device and usage information, such as your IP address, browser and device characteristics, operating system, language preferences, referring URLs, device name, country, location, information about how and when you use our Apps and other technical information. This information is primarily needed to maintain the security and operation of our Apps, and for our internal analytics and reporting purposes. . Like many businesses, we also collect information through cookies and similar technologies. . HOW DO WE USE YOUR INFORMATION? . In Short: We process your information for purposes based on legitimate business interests, the fulfillment of our contract with you, compliance with our legal obligations, and/or your consent. . We use personal information collected via our Apps for a variety of business purposes described below. We process your personal information for these purposes in reliance on our legitimate business interests, in order to enter into or perform a contract with you, with your consent, and/or for compliance with our legal obligations. We indicate the specific processing grounds we rely on next to each purpose listed below. . We use the information we collect or receive: . To facilitate account creation and logon process. If you choose to link your account with us to a third party account (such as your Google or Facebook account), we use the information you allowed us to collect from those third parties to facilitate account creation and logon process for the performance of the contract. . WILL YOUR INFORMATION BE SHARED WITH ANYONE? . In Short: We only share information with your consent, to comply with laws, to provide you with services, to protect your rights, or to fulfill business obligations. . We may process or share data based on the following legal basis: . Consent: We may process your data if you have given us specific consent to use your personal information in a specific purpose. . | Legitimate Interests: We may process your data when it is reasonably necessary to achieve our legitimate business interests. . | Performance of a Contract: Where we have entered into a contract with you, we may process your personal information to fulfill the terms of our contract. . | Legal Obligations: We may disclose your information where we are legally required to do so in order to comply with applicable law, governmental requests, a judicial proceeding, court order, or legal process, such as in response to a court order or a subpoena (including in response to public authorities to meet national security or law enforcement requirements). . | Vital Interests: We may disclose your information where we believe it is necessary to investigate, prevent, or take action regarding potential violations of our policies, suspected fraud, situations involving potential threats to the safety of any person and illegal activities, or as evidence in litigation in which we are involved. . | . DO WE USE COOKIES AND OTHER TRACKING TECHNOLOGIES? . In Short: We may use cookies and other tracking technologies to collect and store your information. . We may use cookies and similar tracking technologies (like web beacons and pixels) to access or store information. Specific information about how we use such technologies and how you can refuse certain cookies is set out in our Cookie Policy. . DO WE USE GOOGLE MAPS? . In Short: Yes, we use Google Maps for the purpose of providing better service. . This mobile application uses Google Maps APIs. You may find the Google Maps APIs Terms of Service here. To better understand Google’s Privacy Policy, please refer to this link. . By using our Maps API Implementation, you agree to be bound by Google’s Terms of Service. . HOW LONG DO WE KEEP YOUR INFORMATION? . In Short: We keep your information for as long as necessary to fulfill the purposes outlined in this privacy notice unless otherwise required by law. . We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy notice, unless a longer retention period is required or permitted by law (such as tax, accounting or other legal requirements). No purpose in this policy will require us keeping your personal information for longer than the period of time in which users have an account with us. . When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymize it, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible. . HOW DO WE KEEP YOUR INFORMATION SAFE? . In Short: We aim to protect your personal information through a system of organizational and technical security measures. . We have implemented appropriate technical and organizational security measures designed to protect the security of any personal information we process. However, please also remember that we cannot guarantee that the internet itself is 100% secure. Although we will do our best to protect your personal information, transmission of personal information to and from our Apps is at your own risk. You should only access the services within a secure environment. . DO WE COLLECT INFORMATION FROM MINORS? . In Short: We do not knowingly collect data from or market to children under 18 years of age. . We do not knowingly solicit data from or market to children under 18 years of age. By using the Apps, you represent that you are at least 18 or that you are the parent or guardian of such a minor and consent to such minor dependent’s use of the Apps. If we learn that personal information from users less than 18 years of age has been collected, we will deactivate the account and take reasonable measures to promptly delete such data from our records. If you become aware of any data we have collected from children under age 18, please contact us at app@svalbard.dev. . WHAT ARE YOUR PRIVACY RIGHTS? . In Short: In some regions, such as the European Economic Area, you have rights that allow you greater access to and control over your personal information. You may review, change, or terminate your account at any time. . In some regions (like the European Economic Area), you have certain rights under applicable data protection laws. These may include the right (i) to request access and obtain a copy of your personal information, (ii) to request rectification or erasure; (iii) to restrict the processing of your personal information; and (iv) if applicable, to data portability. In certain circumstances, you may also have the right to object to the processing of your personal information. To make such a request, please use the contact details provided below. We will consider and act upon any request in accordance with applicable data protection laws. . If we are relying on your consent to process your personal information, you have the right to withdraw your consent at any time. Please note however that this will not affect the lawfulness of the processing before its withdrawal. . If you are resident in the European Economic Area and you believe we are unlawfully processing your personal information, you also have the right to complain to your local data protection supervisory authority. You can find their contact details here: http://ec.europa.eu/justice/data-protection/bodies/authorities/index_en.htm. . If you have questions or comments about your privacy rights, you may email us at app@svalbard.dev. . Account Information . If you would at any time like to review or change the information in your account or terminate your account, you can: . Log into your account settings and update your user account. | . Upon your request to terminate your account, we will deactivate or delete your account and information from our active databases. However, some information may be retained in our files to prevent fraud, troubleshoot problems, assist with any investigations, enforce our Terms of Use and/or comply with legal requirements. . CONTROLS FOR DO-NOT-TRACK FEATURES . Most web browsers and some mobile operating systems and mobile applications include a Do-Not-Track (“DNT”) feature or setting you can activate to signal your privacy preference not to have data about your online browsing activities monitored and collected. No uniform technology standard for recognizing and implementing DNT signals has been finalized. As such, we do not currently respond to DNT browser signals or any other mechanism that automatically communicates your choice not to be tracked online. If a standard for online tracking is adopted that we must follow in the future, we will inform you about that practice in a revised version of this privacy notice. . DO CALIFORNIA RESIDENTS HAVE SPECIFIC PRIVACY RIGHTS? . In Short: Yes, if you are a resident of California, you are granted specific rights regarding access to your personal information. . California Civil Code Section 1798.83, also known as the “Shine The Light” law, permits our users who are California residents to request and obtain from us, once a year and free of charge, information about categories of personal information (if any) we disclosed to third parties for direct marketing purposes and the names and addresses of all third parties with which we shared personal information in the immediately preceding calendar year. If you are a California resident and would like to make such a request, please submit your request in writing to us using the contact information provided below. . If you are under 18 years of age, reside in California, and have a registered account with the Apps, you have the right to request removal of unwanted data that you publicly post on the Apps. To request removal of such data, please contact us using the contact information provided below, and include the email address associated with your account and a statement that you reside in California. We will make sure the data is not publicly displayed on the Apps, but please be aware that the data may not be completely or comprehensively removed from our systems. . DO WE MAKE UPDATES TO THIS POLICY? . In Short: Yes, we will update this policy as necessary to stay compliant with relevant laws. . We may update this privacy notice from time to time. The updated version will be indicated by an updated “Revised” date and the updated version will be effective as soon as it is accessible. If we make material changes to this privacy notice, we may notify you either by prominently posting a notice of such changes or by directly sending you a notification. We encourage you to review this privacy notice frequently to be informed of how we are protecting your information. . HOW CAN YOU CONTACT US ABOUT THIS POLICY? . If you have questions or comments about this policy, you may email us at app@svalbard.dev. . HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU? . Based on the laws of some countries, you may have the right to request access to the personal information we collect from you, change that information, or delete it in some circumstances. To request to review, update, or delete your personal information, please email us at app@svalbard.dev. We will respond to your request within 30 days. .",
    "url": "http://localhost:4000/docs/policy/privacy-notice.html",
    "relUrl": "/docs/policy/privacy-notice.html"
  }
  
}